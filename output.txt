Script started on Sun 28 Jan 2018 10:23:38 AM PST
sujitn@uw1-320-04:~/ucourses/css343/labs/ass2$ valgrind ./test[9P./testg++ -std=c++14 -g  -Wall -Wextra   ass2Test.cpp -o test[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cls[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cg++ -std=c++14 -g  -Wall -Wextra   ass2Test.cpp -o test[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C./test[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cg++ -std=c++14 -g  -Wall -Wextra   ass2Test.cpp -o test[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C./test[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvalgrind ./test[Kvalgrind ./test[9P./testg++ -std=c++14 -g  -Wall -Wextra   ass2Test.cpp -o test[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K2.cpp -o my[K[Kbst
sujitn@uw1-320-04:~/ucourses/css343/labs/ass2$ ./bst
OK: bst1 != bst2
OK: bst1 == bst2
OK: bst1 contains d
OK: bst1 does not contain x
OK: adding g second time returns false
OK: bst3 does not contain x
OK: bst3 contains g
OK: bst4 == bst2
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 2
Enter a string: r
Not Found r
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 6
Enter multiple strings: r t u v w c
Added r
Added t
Added u
Added v
Added w
Added c
                        w
                    v
                u
            t
        r
            c
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 4
Height: 5
Number of nodes: 6
                        w
                    v
                u
            t
        r
            c
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 3
c r t u v w 
                        w
                    v
                u
            t
        r
            c
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 1
Enter a string: d
Added d
                        w
                    v
                u
            t
        r
                d
            c
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> s 2
Enter a string: w
Found w
                        w
                    v
                u
            t
        r
                d
            c
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 5
                w
            v
                u
        t
                r
                    d
            c
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 4
Height: 4
Number of nodes: 7
                w
            v
                u
        t
                r
                    d
            c
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 8
Enter multiple strings: a b c d e f
                f
            e
                d
        c
                b
            a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 7
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 10
bst1 is empty: false
E added
bst1 is empty: false
EW added: true
A added: true
R added: true
F added: true
bst1 constains R: true
Adding 2nd g: false
Second A is not added
            k
        g
            d
                        R
                            F
                    EW
                E
                    A
bst1 Height: 6
bst2 height: 2
Total Nodes in bst1: 8
Total Nodes in bst2: 3
Clear bst1
bst1 is empty: true
bst2 is empty: true
bs1 contains E: false

isEmpty tested

Testing Add!
            Z
        Y
            K
                A

testing clear!
                        4
                    3
                2
            1
        0
clearing bst!
Number of nodes in bst: 0

Testing copy constructor!
Display bst
            13
        9
                    4
                2
            0
Copying bst to bstCopy
Display bstCopy
            13
        9
                    4
                2
            0

getHeight Tested
            10
        9
            2

contains tested

bstSame == bst: true
bst1 == bst: true
Tested == operator

bstSame != bst: false
bst is cleared
bstSame != bst: true
Added some values in bst!
bst != bstSame: true
Tested != operator
            TR
                T
        R
                I
                    G
            D
After inorderTraversal: 
D G I R T TR 
inorderTraversal tested
Tree Read
                    9
                8
            7
                    6
                5
        4
                    3
                2
            1
                0
Tree with only one item
        3
readTree tested

Testing rebalance
                                            9
                                        8
                                    7
                                6
                            5
                        4
                    3
                2
            1
        0
                    9
                8
            7
                    6
                5
        4
                    3
                2
            1
                0
Rebalance testing done

My tests are Done!
sujitn@uw1-320-04:~/ucourses/css343/labs/ass2$ valgrind ./bst
==5769== Memcheck, a memory error detector
==5769== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5769== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5769== Command: ./bst
==5769== 
OK: bst1 != bst2
OK: bst1 == bst2
OK: bst1 contains d
OK: bst1 does not contain x
OK: adding g second time returns false
OK: bst3 does not contain x
OK: bst3 contains g
OK: bst4 == bst2
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 8
Enter multiple strings: a b c d e f t g h 
                    h
                g
            f
                e
        d
                c
            b
                a
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 7
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 4
Height: 0
Number of nodes: 0
treeMenuString
1. Add
2. Search
3. Inorder traverse
4. Height & Number of nodes
5. Rebalance
6. Add Multiple
7. Clear tree
8. Create tree from sorted array
10. Exit
>> 10
bst1 is empty: false
E added
bst1 is empty: false
EW added: true
A added: true
R added: true
F added: true
bst1 constains R: true
Adding 2nd g: false
Second A is not added
            k
        g
            d
                        R
                            F
                    EW
                E
                    A
bst1 Height: 6
bst2 height: 2
Total Nodes in bst1: 8
Total Nodes in bst2: 3
Clear bst1
bst1 is empty: true
bst2 is empty: true
bs1 contains E: false

isEmpty tested

Testing Add!
            Z
        Y
            K
                A

testing clear!
                        4
                    3
                2
            1
        0
clearing bst!
Number of nodes in bst: 0

Testing copy constructor!
Display bst
            13
        9
                    4
                2
            0
Copying bst to bstCopy
Display bstCopy
            13
        9
                    4
                2
            0

getHeight Tested
            10
        9
            2

contains tested

bstSame == bst: true
bst1 == bst: true
Tested == operator

bstSame != bst: false
bst is cleared
bstSame != bst: true
Added some values in bst!
bst != bstSame: true
Tested != operator
            TR
                T
        R
                I
                    G
            D
After inorderTraversal: 
D G I R T TR 
inorderTraversal tested
Tree Read
                    9
                8
            7
                    6
                5
        4
                    3
                2
            1
                0
Tree with only one item
        3
readTree tested

Testing rebalance
                                            9
                                        8
                                    7
                                6
                            5
                        4
                    3
                2
            1
        0
                    9
                8
            7
                    6
                5
        4
                    3
                2
            1
                0
Rebalance testing done

My tests are Done!
==5769== 
==5769== HEAP SUMMARY:
==5769==     in use at exit: 72,704 bytes in 1 blocks
==5769==   total heap usage: 123 allocs, 122 frees, 80,341 bytes allocated
==5769== 
==5769== LEAK SUMMARY:
==5769==    definitely lost: 0 bytes in 0 blocks
==5769==    indirectly lost: 0 bytes in 0 blocks
==5769==      possibly lost: 0 bytes in 0 blocks
==5769==    still reachable: 72,704 bytes in 1 blocks
==5769==         suppressed: 0 bytes in 0 blocks
==5769== Rerun with --leak-check=full to see details of leaked memory
==5769== 
==5769== For counts of detected and suppressed errors, rerun with: -v
==5769== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
sujitn@uw1-320-04:~/ucourses/css343/labs/ass2$ exit

Script done on Sun 28 Jan 2018 10:28:15 AM PST
